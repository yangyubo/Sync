import Foundation

/// The ParsingError codes generated by JSON.
public enum ParsingError: Error {
    case notFound, failed
}

public class JSON {
    /**
     Returns a JSON object from a file.
     - parameter fileName: The name of the file, the expected extension is `.json`.
     - parameter bundle:  The NSBundle where the file is located, by default is the main bundle.
     - returns: A JSON object, it can be either a Dictionary or an Array.
     */
    public class func from(_ fileName: String) throws -> Any? {
        var JSON: Any?
        let bundle: Bundle = Bundle.module

        guard let url = URL(string: fileName), let fileURL = bundle.url(forResource: url.deletingPathExtension().absoluteString, withExtension: url.pathExtension) else { throw ParsingError.notFound }

        guard let data = try? Data(contentsOf: fileURL) else { throw ParsingError.failed }

        JSON = try data.toJSON()

        return JSON
    }
}

public extension Data {
    /**
     Converts NSData to a JSON object.
     - returns: A JSON object, it can be either a Dictionary or an Array.
     */
    func toJSON() throws -> Any? {
        var JSON: Any?
        do {
            JSON = try JSONSerialization.jsonObject(with: self, options: []) as Any
        } catch {
            throw ParsingError.failed
        }

        return JSON
    }
}
